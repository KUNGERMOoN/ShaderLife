#pragma kernel Update
#pragma kernel FlipUpdate
#pragma kernel Randomise
#pragma kernel FlipRandomise
#pragma kernel SetPixels
#pragma kernel FlipSetPixels

RWStructuredBuffer<int> cellsA;
RWStructuredBuffer<int> cellsB;

int Size;
int Seed;
float Chance;

Texture2D<float4> LookupTexture;

// Hash function from H. Schechter & R. Bridson, goo.gl/RXiKaH
uint hash(uint s)
{
    s ^= 2747636419u;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    return s;
}

int index(in int x, in int y)
{
    return (x + 1) * (Size + 2) + y + 1;
}

int Get(int i, const bool flip)
{
    return flip ? cellsB[i] : cellsA[i];
}

void Set(int i, int value, const bool flip)
{
    if (flip)
        cellsB[i] = value;
    else
        cellsA[i] = value;
}

int Lookup(int input)
{
    
    
    int2 pixelPos = undefined;
    
    return asint(LookupTexture[pixelPos.xy].r);
}

void update(uint3 id, const bool flip)
{
    int i = index(id.x, id.y);
    
    int x = Get(i, !flip);
    int a = Get(i + Size + 1, !flip);
    int b = Get(i + Size + 2, !flip);
    int c = Get(i + Size + 3, !flip);
    int d = Get(i - 1, !flip);
    int e = Get(i + 1, !flip);
    int f = Get(i - Size - 3, !flip);
    int g = Get(i - Size - 2, !flip);
    int h = Get(i - Size - 1, !flip);
    
    int input = (a & 1) << 23 +
                (b & 15) << 19 +
                ((c >> 3) & 1) << 18 +
                ((d >> 4) & 1) << 17 +
                ((x >> 4) & 15) << 13 +
                ((e >> 7) & 1) << 12 +
                (d & 1) << 11 +
                (x & 15) << 7 +
                ((e >> 3) & 1) << 6 +
                ((f >> 4) & 1) << 5 +
                ((g >> 4) & 15) << 1 +
                (h >> 7) & 1;
    
    Set(i, Lookup(input), flip);
}

void randomise(uint3 id, const bool flip)
{
    
}


[numthreads(8, 8, 1)]
void Randomise(uint3 id : SV_DispatchThreadID)
{
    randomise(id, false);
}

[numthreads(8, 8, 1)]
void FlipRandomise(uint3 id : SV_DispatchThreadID)
{
    randomise(id, true);
}


[numthreads(8, 8, 1)]
void Update(uint3 id : SV_DispatchThreadID)
{
    update(id, false);
}

[numthreads(8, 8, 1)]
void FlipUpdate(uint3 id : SV_DispatchThreadID)
{
    update(id, true);
}

int2 TargetPixel = int2(0, 0);
void setPixel(int2 offset, const bool flip)
{
    
}

[numthreads(1, 1, 1)]
void SetPixels(uint3 id : SV_DispatchThreadID)
{
    setPixel(id.xy, false);
}

[numthreads(1, 1, 1)]
void FlipSetPixels(uint3 id : SV_DispatchThreadID)
{
    setPixel(id.xy, true);
}
#pragma kernel Update
#pragma kernel Randomise
#pragma kernel SetPixels

#pragma multi_compile __ FLIP_BUFFER

RWStructuredBuffer<int> cells;
RWStructuredBuffer<int> flipCells;

int Size;
int Seed;
float Chance;

Buffer<int> LookupTable;

// Hash function from H. Schechter & R. Bridson, goo.gl/RXiKaH
uint hash(uint s)
{
    s ^= 2747636419u;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    return s;
}

int randomConfiguration(uint seed)
{
    return hash(seed) % 256;
}

int index(in int x, in int y)
{
    return (x + 1) * (Size + 2) + y + 1;
}

int Get(int i)
{
    if (FLIP_BUFFER)
    {
        return flipCells[i];
    }
    else
    {
        return cells[i];
    }
}

void Set(int i, int value)
{
    if (FLIP_BUFFER)
    {
        flipCells[i] = value;
    }
    else
    {
        cells[i] = value;
    }
}

[numthreads(8, 8, 1)]
void Randomise(uint3 id : SV_DispatchThreadID)
{
    int i = index(id.x, id.y);
    
    Set(i, randomConfiguration(i + Seed));
}

[numthreads(8, 8, 1)]
void Update(uint3 id : SV_DispatchThreadID)
{
    int i = index(id.x, id.y);
    
    int x = Get(i);
    int a = Get(i - Size - 3);
    int b = Get(i - 1);
    int c = Get(i + Size + 1);
    int d = Get(i - Size - 2);
    int e = Get(i + Size + 2);
    int f = Get(i - Size - 1);
    int g = Get(i + 1);
    int h = Get(i + Size + 3);
    
    int input = 
        ((a << 23) & 8388608) +
		((b << 19) & 7864320) +
		((c << 15) & 262144) +
		((d << 13) & 131072) +
		((d << 11) & 2048) +
		((e << 5) & 4096) +
		((e << 3) & 64) +
		((f << 1) & 32) +
		((g >> 3) & 30) +
		((h >> 7) & 1) +
		((x << 9) & 122880) +
		((x << 7) & 1920);

    
    Set(i, input);
}

int2 TargetPixel = int2(0, 0);
[numthreads(1, 1, 1)]
void SetPixels(uint3 id : SV_DispatchThreadID)
{
    //TODO
}
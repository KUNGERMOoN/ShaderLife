#pragma kernel Update
#pragma kernel Randomise
#pragma kernel Clear
#pragma kernel SetPixel

#pragma enable_d3d11_debug_symbols
#pragma multi_compile __ FLIP_BUFFER

#define RANDOM_WRITE //Use RWStructuredBuffer rather than StructuredBuffer
#include "Shared.cginc"

//Size of the board, in chunks
int2 Size;
int Seed;
float Chance;

StructuredBuffer<int> LookupTable;

// Hash function from H. Schechter & R. Bridson, goo.gl/RXiKaH
uint hash(uint s)
{
    s ^= 2747636419u;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    return s;
}

int randomConfiguration(uint seed)
{
    int result = 0;
    for(int i = 0; i < 8; i++){
        float rnd = (hash(seed * i) / 4294967295.0);
        bool alive = rnd <= Chance && rnd != 0;
        result |= alive << i;
    }
    return result;
}

uint index(in uint x, in uint y)
{
    return (x + 1) * (Size.y + 2) + y + 1;
}

int Lookup(uint index)
{
    return (LookupTable[index / 4]
            >> ((index % 4) * 8))
            & 255;
}

[numthreads(8, 8, 1)]
void Update(uint3 id : SV_DispatchThreadID)
{
    uint i = index(id.x, id.y);
    
    uint x = GetPrevious(i);
    uint a = GetPrevious(i - Size.y - 3);
    uint b = GetPrevious(i - 1);
    uint c = GetPrevious(i + Size.y + 1);
    uint d = GetPrevious(i - Size.y - 2);
    uint e = GetPrevious(i + Size.y + 2);
    uint f = GetPrevious(i - Size.y - 1);
    uint g = GetPrevious(i + 1);
    uint h = GetPrevious(i + Size.y + 3);
    
    //Docs/LookupTables.xlsx shows how those magic numbers are actually obtained
    uint input =
        ((a << 23) & 8388608) +
		((b << 19) & 7864320) +
		((c << 15) & 262144) +
		((d << 13) & 131072) +
		((d << 11) & 2048) +
		((e << 5) & 4096) +
		((e << 3) & 64) +
		((f << 1) & 32) +
		((g >> 3) & 30) +
		((h >> 7) & 1) +
		((x << 9) & 122880) +
		((x << 7) & 1920);
    
    SetCurrent(i, GetByte(LookupTable, input));
}

[numthreads(8, 8, 1)]
void Randomise(uint3 id : SV_DispatchThreadID)
{
    int i = index(id.x, id.y);
    
    SetCurrent(i, randomConfiguration(i ^ Seed));
}

[numthreads(8, 8, 1)]
void Clear(uint3 id : SV_DispatchThreadID)
{
    int i = index(id.x, id.y);
    
    SetCurrent(i, 0);
}

int2 TargetPixel = int2(0, 0);
bool TargetValue = true;
[numthreads(1, 1, 1)]
void SetPixel(uint3 id : SV_DispatchThreadID)
{
    int i = index(TargetPixel.x / 4u, TargetPixel.y / 2u);
    
    int chunk = GetCurrent(i);

    //Which bit in the chunk we want to update
    int localIndex = 7 - ((TargetPixel.x % 4u) + 4 * (TargetPixel.y % 2u));

    //Clear the bit we want to update...
    chunk &= ~(1 << localIndex);
    //... and set it to our desired value
    chunk |= TargetValue << localIndex;

    SetCurrent(i, chunk);
}
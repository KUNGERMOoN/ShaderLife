#pragma kernel Update
#pragma kernel FlipUpdate
#pragma kernel Randomise
#pragma kernel FlipRandomise
#pragma kernel SetPixels
#pragma kernel FlipSetPixels

struct Cell
{
    int Alive;
    int Neighbours;
};

RWStructuredBuffer<Cell> cellsA;
RWStructuredBuffer<Cell> cellsB;

int Size;
int Seed;
float Chance;

//RWTexture2D<float4> Rendered;


int GetAlive(const bool flip, int i)
{
    if (flip)
        return cellsB[i].Alive;
    else
        return cellsA[i].Alive;
}

void SetAlive(const bool flip, int i, bool value)
{
    if (flip)
        cellsB[i].Alive = value;
    else
        cellsA[i].Alive = value;
}

// Hash function from H. Schechter & R. Bridson, goo.gl/RXiKaH
uint hash(uint s)
{
    s ^= 2747636419u;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    return s;
}

float random(uint seed)
{
    return float(hash(seed)) / 4294967295.0; // 2^32-1
}

int index(in int x, in int y)
{
    return (x + 1) * (Size + 2) + y + 1;
}

uint count_neighbours(in int i, const bool flip)
{
    int n = 0;
    
    //For cells that were already updated, we neet to check their past value
    //And for cells that were not updated yet, we neet to check their current value
    n += GetAlive(flip, i - Size - 3);
    n += GetAlive(flip, i - Size - 2);
    n += GetAlive(flip, i - Size - 1);
    n += GetAlive(flip, i - 1);
    n += GetAlive(flip, i + 1);
    n += GetAlive(flip, i + Size + 1);
    n += GetAlive(flip, i + Size + 2);
    n += GetAlive(flip, i + Size + 3);
    
    return n;
}

void update(uint3 id, bool flip)
{
    //We always display the results of the calculations in the last frame
    //And calculate values for the next frame
    //That's why what the user sees and what we refer to as the 'current frame' is actually the previous frame
    
    int i = index(id.x, id.y);
    
    int wasAlive = GetAlive(!flip, i);
    int neighbors = count_neighbours(i, !flip); //Count the alive neighbors in the last frame
    
    //Render values from the last frame
    //Rendered[id.xy] = wasAlive;
    
    //Calculate values for the next frame
    bool alive = (neighbors == 3) || (wasAlive && (neighbors == 2));
    
    //Apply changes
    SetAlive(flip, i, alive);
}

void randomise(uint3 id, bool flip)
{
    //Note that to see the changes you need to call Update afterwards
    int i = index(id.x, id.y);
    
    SetAlive(flip, i, random(i + Seed) <= Chance);
}


[numthreads(8, 8, 1)]
void Randomise(uint3 id : SV_DispatchThreadID)
{
    randomise(id, false);
}

[numthreads(8, 8, 1)]
void FlipRandomise(uint3 id : SV_DispatchThreadID)
{
    randomise(id, true);
}


[numthreads(8, 8, 1)]
void Update(uint3 id : SV_DispatchThreadID)
{
    update(id, false);
}

[numthreads(8, 8, 1)]
void FlipUpdate(uint3 id : SV_DispatchThreadID)
{
    update(id, true);
}

int2 TargetPixel = int2(0, 0);

void setPixel(int2 offset, const bool flip)
{
    int2 pos = TargetPixel + offset;
    int i = index(pos.x, pos.y);
    SetAlive(flip, i, true);
    //Rendered[pos] = true;
}

[numthreads(1, 1, 1)]
void SetPixels(uint3 id : SV_DispatchThreadID)
{
    setPixel(id.xy, false);
}

[numthreads(1, 1, 1)]
void FlipSetPixels(uint3 id : SV_DispatchThreadID)
{
    setPixel(id.xy, true);
}
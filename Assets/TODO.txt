TODO (the real one):
Figure out what eats 40% of the GPU as soon as we start the game (with "Update in realtime" disabled!)
	it should't be the drawing shader because it also runs when the game is paused (GPU is fine then)
	and it shouldn't be the simulation compute shader, because "Update in realtime" is disabled
	(and debugging shows that Simulation.UpdateBoard wasn't run)
	EDIT 1: It moving the camera when game is paused (or in editor) also causes this problem.
	Possibly it's just drawing shader being unoptimized
	Edit 2: Nope, it also happens in a clear new scene with default background.
	So it seems like it's just some strange unity thing
UI
	+ Add controls to update multiple times in one frame (and maybe)
	+ fps counter
importing/exporting to popular game of life file formats

TODO for video: 
Documentation
Make the actual video about it
Clean up the Excel sheet
Get rid of Odin and make custom editors
make a benchmark vs old simulation
allow to swap the old and new simulation compute shader
decide if we actually need the cpu-side board (and if yes, check if it works)

TODO sometime maybe:
make the grid zoom calculation work in 3d (maybe, if yes use the code by bgolus)
anti-aliasing in the drawing shader code
make a heatmap shader
async data redback to CPU
use hex literals in shaders and excel sheets for readability
kernel for editing multiple (at least 8x8) cells (basically SetPixel but with [numthreads(8, 8, 1)])
	+ use it when needed for better performance
add customizable colors to heatmap shader
	+ ability to round the current heatmap color to highest/lowest color (maybe for things like OTCA metapixel)